{"version":3,"sources":["recoil/atoms.js","components/TodoItem.jsx","components/TodoItemCreator.jsx","recoil/selectors.js","components/TodoListStats.jsx","components/TodoListFilters.jsx","App.jsx","index.js"],"names":["todoListState","atom","key","default","todoListFilterState","replaceItemAtIndex","arr","index","newValue","slice","removeItemAtIndex","TodoItem","item","useRecoilState","todoList","setTodoList","findIndex","listItem","type","value","text","onChange","target","newList","checked","isComplete","onClick","TodoItemCreator","useState","inputValue","setInputValue","useSetRecoilState","oldTodoList","id","uuidv4","filteredTodoListState","selector","get","filter","list","todoListStatsState","totalNum","length","totalCompletedNum","totalUncompletedNum","percentCompleted","TodoListStats","useRecoilValue","formattedPercenCompleted","Math","round","isNaN","TodoListFilters","setFilter","App","console","log","map","todoItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e99cb61.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const todoListState = atom({\n    key: 'todoListState',\n    default: [],\n});\n\nexport const todoListFilterState = atom({\n    key: 'todoListFilterState',\n    default: 'Show All',\n});","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { todoListState } from \"../recoil/atoms\";\n\nconst TodoItem = ({item}) => {\n\n    const [todoList, setTodoList] = useRecoilState(todoListState);\n    const index = todoList.findIndex((listItem) => listItem === item);\n\n    const editItemText = (({target: {value}}) => {\n        const newList = replaceItemAtIndex(todoList, index, {\n            ...item,\n            text: value,\n        })\n\n        setTodoList(newList);\n    })\n\n    const toggleItemCompletion = () => {\n        const newList = replaceItemAtIndex(todoList, index, {\n            ...item,\n            isComplete: !item.isComplete,\n        })\n        setTodoList(newList);\n    }\n\n    const deleteItem = () => {\n        const newList = removeItemAtIndex(todoList, index);\n        setTodoList(newList);\n    }\n\n\n    return (\n        <div>\n            <input type='text' value={item.text} onChange={editItemText} />\n            <input\n                type='checkbox'\n                checked={item.isComplete}\n                onChange={toggleItemCompletion}\n            />\n            <button onClick={deleteItem}>X</button>\n        </div>\n    )\n}\n\nconst replaceItemAtIndex = (arr, index, newValue) => {\n    return [...arr.slice(0,index), newValue, ...arr.slice(index+1)];\n}\n\nconst removeItemAtIndex = (arr, index) => {\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\n\nexport default TodoItem;","import React, { useState } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { todoListState } from \"../recoil/atoms\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst TodoItemCreator = () => {\n\n    const [inputValue, setInputValue] = useState('');\n    const setTodoList = useSetRecoilState(todoListState);\n\n    const addItem = () => {\n        setTodoList((oldTodoList) => [\n            ...oldTodoList,\n            {\n                id: uuidv4(),\n                text: inputValue,\n                isComplete: false\n            }\n        ]);\n        setInputValue('')\n    }\n\n    const onChange = ({target: {value}}) => {\n        setInputValue(value);\n    };\n\n\n    return (\n        <div>\n            <input type='text' value={inputValue} onChange={onChange}/>\n            <button onClick={addItem}>Add</button>\n        </div>\n    )\n}\n\nexport default TodoItemCreator","import { selector } from \"recoil\";\nimport { todoListFilterState, todoListState } from \"./atoms\";\n\nexport const filteredTodoListState = selector({\n    key: 'filteredTodoListState',\n    get: ({get}) => {\n        const filter = get(todoListFilterState);\n        const list = get(todoListState);\n\n        switch (filter) {\n            case 'Show Completed':\n                return list.filter((item) => item.isComplete);\n            case 'Show Uncompleted':\n                return list.filter((item) => !item.isComplete);\n            default:\n                return list;\n        }\n    },\n})\n\nexport const todoListStatsState = selector({\n    key: 'todoListStatsState',\n    get: ({get}) => {\n      const todoList = get(todoListState);\n      const totalNum = todoList.length;\n      const totalCompletedNum = todoList.filter((item) => item.isComplete).length;\n      const totalUncompletedNum = totalNum - totalCompletedNum;\n      const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum * 100;\n  \n      return {\n        totalNum,\n        totalCompletedNum,\n        totalUncompletedNum,\n        percentCompleted,\n      };\n    },\n  });","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { todoListStatsState } from \"../recoil/selectors\";\n\nconst TodoListStats = () => {\n\n    const {\n        totalNum,\n        totalCompletedNum,\n        totalUncompletedNum,\n        percentCompleted\n    } = useRecoilValue(todoListStatsState)\n\n    const formattedPercenCompleted = Math.round(percentCompleted)\n\n    return (\n    <ul>\n        <li>Total items: {totalNum}</li>\n        <li>Items completed: {totalCompletedNum}</li>\n        <li>Items not completed: {totalUncompletedNum}</li>\n        <li>Percented completed: {!isNaN(formattedPercenCompleted) ? `${formattedPercenCompleted}%` : '0%'}</li>\n    </ul>\n    );\n}\n\nexport default TodoListStats;","import React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { todoListFilterState } from \"../recoil/atoms\";\n\nconst TodoListFilters = () => {\n\n    const [filter, setFilter] = useRecoilState(todoListFilterState)\n\n    const updateFilter = ({target: {value}}) => {\n        setFilter(value);\n    }\n\n    return (    \n    <>\n        Filter:\n        <select value={filter} onChange={updateFilter}>\n          <option value=\"Show All\">All</option>\n          <option value=\"Show Completed\">Completed</option>\n          <option value=\"Show Uncompleted\">Uncompleted</option>\n        </select>\n    </>\n    );\n}\n\nexport default TodoListFilters;","import { useRecoilValue } from \"recoil\";\nimport TodoItem from \"./components/TodoItem\";\nimport TodoItemCreator from \"./components/TodoItemCreator\";\nimport TodoListStats from \"./components/TodoListStats\";\nimport TodoListFilters from \"./components/TodoListFilters\";\nimport { filteredTodoListState } from \"./recoil/selectors\";\n\nfunction App() {\n\n  const todoList = useRecoilValue(filteredTodoListState);\n  console.log(todoList);\n  \n  return (\n    <>\n      <TodoListStats />\n      <TodoListFilters />\n      <TodoItemCreator />\n\n      {todoList.map((todoItem) =>\n        <TodoItem key={todoItem.id} item={todoItem} />\n      )}\n\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}